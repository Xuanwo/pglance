name: Release Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    strategy:
      matrix:
        pg-version: [13, 14, 15, 16, 17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-release-pg${{ matrix.pg-version }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-release-pg${{ matrix.pg-version }}-
          ${{ runner.os }}-cargo-release-

    - name: Install PostgreSQL ${{ matrix.pg-version }}
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-${{ matrix.pg-version }} postgresql-server-dev-${{ matrix.pg-version }} protobuf-compiler
        echo "/usr/lib/postgresql/${{ matrix.pg-version }}/bin" >> $GITHUB_PATH

    - name: Install pgrx
      run: |
        cargo install cargo-pgrx --version=0.14.3 --locked
        cargo pgrx init --pg${{ matrix.pg-version }} /usr/lib/postgresql/${{ matrix.pg-version }}/bin/pg_config

    - name: Build release package
      run: |
        cargo pgrx package --no-default-features --features pg${{ matrix.pg-version }} --release

    - name: Create release archive
      run: |
        cd target/release/pglance-pg${{ matrix.pg-version }}
        tar -czf ../../../pglance-pg${{ matrix.pg-version }}-${{ github.sha }}.tar.gz .

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pglance-pg${{ matrix.pg-version }}-${{ github.sha }}
        path: |
          pglance-pg${{ matrix.pg-version }}-${{ github.sha }}.tar.gz
        retention-days: 30

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/
        asset_name: pglance-release-${{ github.ref_name }}.zip
        asset_content_type: application/zip

  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Check for outdated Rust dependencies
      run: |
        cargo install cargo-outdated
        cargo outdated --exit-code 1 || echo "::warning::Some Rust dependencies are outdated"

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Check Python dependencies
      working-directory: integration_tests
      run: |
        uv sync
        uv tree